# Generated by Django 3.0.8 on 2021-02-21 17:36

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('address', models.TextField(blank=True, max_length=50)),
                ('reputation', models.IntegerField(choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], default=5)),
                ('avatar', models.ImageField(blank=True, upload_to='keepmain/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Thing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('thing_name', models.CharField(max_length=50)),
                ('serial_no', models.CharField(blank=True, max_length=50)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('On Keep', 'On Keep'), ('Warehouse', 'Warehouse'), ('Lent', 'Lent')], default='On Keep', max_length=10)),
                ('condition', models.CharField(choices=[('Good', 'Good'), ('Bad', 'Bad')], default='Good', max_length=4)),
                ('image', models.ImageField(blank=True, upload_to='keepmain/')),
                ('borrowed', models.BooleanField(default=False)),
                ('promised_return_by_borrower', models.DateField(blank=True, null=True)),
                ('attempt_return', models.BooleanField(default=False)),
                ('current_borrower', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='current_borrower', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TransactionBorrow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_transaction', models.DateTimeField(auto_now_add=True)),
                ('promised_return', models.DateTimeField()),
                ('accepted', models.BooleanField(default=False)),
                ('borrower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='b_borrower', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='b_owner', to=settings.AUTH_USER_MODEL)),
                ('thing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='b_thing', to='keepmain.Thing')),
            ],
        ),
        migrations.CreateModel(
            name='TransactionLend',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_transaction', models.DateTimeField(auto_now_add=True)),
                ('promised_return', models.DateField()),
                ('borrower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='borrower', to=settings.AUTH_USER_MODEL)),
                ('lender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lender', to=settings.AUTH_USER_MODEL)),
                ('thing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='thing', to='keepmain.Thing')),
            ],
        ),
        migrations.CreateModel(
            name='TransactionReturn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_transaction', models.DateTimeField(auto_now_add=True)),
                ('date_returned', models.DateField(blank=True, null=True)),
                ('accepted', models.BooleanField(default=False)),
                ('based_on_borrow', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='based_on_borrow', to='keepmain.TransactionBorrow')),
                ('based_on_lend', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='based_on_lend', to='keepmain.TransactionLend')),
                ('borrower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='r_borrower', to=settings.AUTH_USER_MODEL)),
                ('thing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='r_thing', to='keepmain.Thing')),
            ],
        ),
        migrations.CreateModel(
            name='Outcome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('promised_date', models.DateField(blank=True, null=True)),
                ('return_date_attempt', models.DateField(blank=True, null=True)),
                ('return_date_success', models.DateField(blank=True, null=True)),
                ('borrower', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bo', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ow', to=settings.AUTH_USER_MODEL)),
                ('thing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='th', to='keepmain.Thing')),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='keepmain.TransactionLend')),
            ],
        ),
        migrations.CreateModel(
            name='AgreeOrRejectTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(blank=True, choices=[('agree', 'agree'), ('reject', 'reject')], max_length=6)),
                ('t_id', models.IntegerField(blank=True)),
                ('action_made', models.DateTimeField(auto_now_add=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('t_borrow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='keepmain.TransactionBorrow')),
            ],
        ),
        migrations.CreateModel(
            name='AgreeOrRejectReturn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(blank=True, choices=[('agree', 'agree'), ('reject', 'reject')], max_length=6)),
                ('t_id', models.IntegerField(blank=True)),
                ('action_made', models.DateTimeField(auto_now_add=True)),
                ('based_on_borrow', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='keepmain.TransactionBorrow')),
                ('based_on_lend', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='keepmain.TransactionLend')),
                ('based_on_return', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='keepmain.TransactionReturn')),
                ('borrower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bor_owner', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
